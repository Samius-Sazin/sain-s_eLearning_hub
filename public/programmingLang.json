[
    {
        "id": "01",
        "courseName": "Learn C from basic to advance",
        "LangName": "C Programming Language",
        "creator": "Dennis Ritchie",
        "yearCreated": "1970",
        "purpose": "C was created as a general-purpose programming language for writing system software, including operating systems and utility programs. It aimed to provide low-level access to computer memory while still being portable across different hardware platforms.",
        "benefits": "C's simplicity, efficiency, and portability have made it one of the most widely used programming languages in history. Its close-to-the-metal nature allows for fine-grained control over system resources, making it suitable for embedded systems and performance-critical applications.",
        "lackings": "C lacks modern language features found in newer languages like automatic memory management and built-in support for higher-level abstractions. Its manual memory management can lead to memory leaks and segmentation faults if not used carefully.",
        "details": "C is a versatile and widely-used programming language known for its efficiency and flexibility. It offers a rich set of features, including a straightforward syntax, robust standard library, and powerful capabilities for low-level system programming. With C, programmers can easily manipulate memory, control hardware, and optimize performance, making it a popular choice for developing operating systems, embedded systems, and applications where speed and resource management are critical. Its simplicity and portability also make it a fundamental language for learning computer science concepts and algorithms. Despite being more than four decades old, C remains relevant and influential in the world of programming, serving as the foundation for many modern languages and technologies.",
        "outcomes":{
            "one": "Master the basics: Learn fundamental concepts such as variables, data types, and control structures.",
            "two": "Practice coding: Write and debug simple programs to reinforce your understanding.",
            "three": "Build projects: Apply your knowledge to real-world projects, such as developing games, utilities, or system software.",
            "four": "Build projects: Apply your knowledge to real-world projects, such as developing games, utilities, or system software."
        },
        "courseDuration": "10 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "4",
        "image": "https://i.pinimg.com/564x/71/5b/59/715b59c8c7545d9dafb1a04111edde40.jpg",
        "demandOutOf10": "9",
        "enrolled": "70"
    },
    {
        "id": "02",
        "courseName": "Learn C++ from basic to advance",
        "LangName": "C++ Programming Language",
        "creator": "Bjarne Stroustrup",
        "yearCreated": "1980",
        "purpose": "C++ was designed as an extension of the C language with support for object-oriented programming (OOP) principles. It aimed to provide a higher level of abstraction while retaining C's efficiency and portability.",
        "benefits": "C++ combines the low-level control of C with high-level features such as classes, inheritance, and polymorphism. It's used extensively in game development, system software, and performance-critical applications where efficiency is paramount.",
        "lackings": "C++'s complexity and steep learning curve can be challenging for beginners. Its flexibility can also lead to code that is difficult to understand and maintain, particularly in large codebases. Additionally, manual memory management in C++ can introduce memory leaks and other memory-related bugs if not managed properly.",
        "details": "C++ is a powerful, multi-paradigm programming language that extends upon the capabilities of C. It incorporates features such as object-oriented programming, generic programming, and memory management control, offering developers flexibility and efficiency in software development. With C++, you can create complex, high-performance applications for a wide range of domains, including system software, game development, and enterprise applications. By learning C++, you'll gain expertise in modern programming techniques and boost your career prospects in the software industry.",
        "outcomes":{
            "one": "Learn the Fundamentals: Start by mastering basic concepts such as variables, data types, and control structures, building a solid foundation for your understanding of the language.",
            "two": "Explore Object-Oriented Programming: Dive into object-oriented programming (OOP) principles, including classes, objects, inheritance, and polymorphism, to organize your code effectively and facilitate code reuse.",
            "three": "Utilize the Standard Library: Familiarize yourself with the Standard Template Library (STL), which provides a rich collection of classes and functions for common data structures and algorithms, enabling you to write efficient and maintainable code.",
            "four": "Develop Real-World Projects: Apply your knowledge to practical projects, such as building applications, games, or libraries, to reinforce your skills and gain hands-on experience with C++ development."
        },
        "courseDuration": "18 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "5",
        "image": "https://miro.medium.com/v2/resize:fit:1400/1*2775lsGzbyIb3teyXB9caw.jpeg",
        "demandOutOf10": "10",
        "enrolled": "100"
    },
    {
        "id": "03",
        "courseName": "Learn C# from basic to advance",
        "LangName": "C# Programming Language",
        "creator": "Microsoft & Anders Hejlsberg",
        "yearCreated": "2000",
        "purpose": "C# was created as a modern, object-oriented programming language for building applications on the Microsoft .NET framework. It aimed to combine the power of C++ with the simplicity of languages like Java and Visual Basic.",
        "benefits": "C# offers a rich set of features, including garbage collection, type safety, and language interoperability with other .NET languages. It's commonly used for building Windows applications, web applications, and games using the Unity game engine.",
        "lackings": "C#'s primary limitation is its ties to the Windows platform and the .NET ecosystem, which can limit its use in cross-platform development scenarios. While efforts like .NET Core and Xamarin have expanded its reach, it's still primarily associated with Microsoft technologies.",
        "details": "C# is a modern, object-oriented programming language developed by Microsoft as part of the .NET framework. It is widely used for developing Windows applications, web applications, games, and enterprise software. C# combines the power of C++ with the simplicity of Visual Basic, offering features such as automatic memory management (garbage collection), type safety, and extensive libraries. Its syntax is similar to that of C++ and Java, making it relatively easy to learn for developers familiar with these languages. Learning C# opens up opportunities in software development across various platforms and industries, including desktop, web, and mobile applications.",
        "outcomes":{
            "one": "Understanding Core Principles: Master foundational programming concepts such as variables, loops, conditionals, and functions in C++.",
            "two": "Exploring Object-Oriented Programming (OOP): Dive deeper into OOP principles like classes, objects, inheritance, polymorphism, and encapsulation to structure your code effectively.",
            "three": "Utilizing Advanced Features: Learn about C++'s advanced features such as templates, exception handling, operator overloading, and standard libraries (STL) for handling complex data structures and algorithms.",
            "four": "Expanding Career Opportunities: With a strong grasp of C++, you can pursue careers in software development, game development, system programming, embedded systems, and other fields requiring high-performance and efficient code. Additionally, C++ serves as a solid foundation for learning other languages like C#, Java, and Python, broadening your skillset and career prospects in the software industry."
        },
        "courseDuration": "15 Hrs",
        "tutorName": "Rakib Been Hasan",
        "rating": "3",
        "image": "https://media.licdn.com/dms/image/D4D12AQEhH3cHujKu2g/article-cover_image-shrink_720_1280/0/1655739793716?e=2147483647&v=beta&t=8QU8E7CrudOg7SCrXDFw7-JIclfcBGKg6JflX7uU_Ns",
        "demandOutOf10": "6",
        "enrolled": "30"
    },
    {
        "id": "04",
        "courseName": "Learn JAVA from basic to advance",
        "LangName": "JAVA Programming Language",
        "creator": "James Gosling",
        "yearCreated": "1995",
        "purpose": "Java can be criticized for its verbosity, with some developers finding its syntax overly verbose compared to other languages. Additionally, while Java's garbage collection simplifies memory management, it can also lead to performance issues in some scenarios.",
        "benefits": "Java's platform independence, strong community support, and extensive libraries make it suitable for building large-scale enterprise applications. Its strict syntax helps catch errors early in development, promoting robustness and reliability.",
        "lackings": "Java can be criticized for its verbosity, with some developers finding its syntax overly verbose compared to other languages. Additionally, while Java's garbage collection simplifies memory management, it can also lead to performance issues in some scenarios.",
        "details": "Java is a versatile, object-oriented programming language developed by Sun Microsystems (now owned by Oracle) in the mid-1990s. It is designed to be platform-independent, making it an ideal choice for developing cross-platform applications. Java is widely used in web development, mobile application development (Android), enterprise software, and large-scale distributed systems. It features automatic memory management (garbage collection), strong type safety, and a rich standard library, making it a popular choice for building robust and scalable software solutions.",
        "outcomes":{
            "one": "Understanding Object-Oriented Programming: Master the principles of OOP, including classes, objects, inheritance, polymorphism, and encapsulation, which form the backbone of Java programming.",
            "two": "Exploring Java Ecosystem: Dive into the vast Java ecosystem, which includes libraries like Java Standard Edition (SE) for desktop applications, Java Enterprise Edition (EE) for web development, and Android development for mobile applications.",
            "three": "Developing Scalable Applications: Learn about Java's features for building scalable and robust applications, such as multi-threading, networking, database connectivity (JDBC), and enterprise features like Servlets, JSP, and EJB.",
            "four": "Expanding Career Opportunities: With Java skills, you can pursue careers in various industries, including software development, web development, enterprise application development, and Android app development. Additionally, Java serves as a stepping stone for learning other languages like Kotlin, Scala, and Groovy, enhancing your versatility and marketability in the software industry."
        },
        "courseDuration": "30 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "5",
        "image": "https://w0.peakpx.com/wallpaper/389/1004/HD-wallpaper-java-logo-white-silk-texture-java-emblem-programming-language-java-silk-background.jpg",
        "demandOutOf10": "8",
        "enrolled": "80"
    },
    {
        "id": "05",
        "courseName": "Learn JavaScript from basic to advance",
        "LangName": "JavaScript Programming Language",
        "creator": "Brendan Eich",
        "yearCreated": "1995",
        "purpose": "Initially developed as a scripting language for web browsers, JavaScript aimed to enable interactive web pages. Its purpose expanded over time to include server-side development (Node.js) and mobile app development (React Native).",
        "benefits": "JavaScript is ubiquitous on the web, making it an essential language for front-end development. It's lightweight, easy to learn, and supports asynchronous programming, which is crucial for handling events in web applications.",
        "lackings": "JavaScript's loose typing and flexible syntax can lead to unexpected behavior if not carefully managed. It's also single-threaded, which can lead to performance bottlenecks in CPU-intensive applications.",
        "details": "JavaScript is a versatile programming language primarily used for web development to add interactivity and dynamic behavior to websites. Developed by Netscape in the mid-1990s, JavaScript is now supported by all major web browsers and has become an essential tool for front-end and back-end web development. Its syntax is similar to Java, but it's not related to it; JavaScript is an interpreted language, allowing for immediate feedback and rapid development. With JavaScript, developers can manipulate HTML and CSS, handle user interactions, create animations, fetch data asynchronously from servers, and build complex web applications.",
        "outcomes":{
            "one": "Expanding Career Opportunities: With JavaScript skills, you can pursue careers in web development, full-stack development, front-end engineering, and mobile app development (using frameworks like React Native or Ionic). Additionally, JavaScript serves as a foundation for learning other technologies such as Node.js for server-side development, opening doors to diverse opportunities in the tech industry.",
            "two": "Building Modern Web Applications: Explore advanced topics like asynchronous programming, AJAX, Promises, and modern frameworks/libraries such as React, Vue.js, or AngularJS to build scalable and efficient web applications.",
            "three": "Enhancing User Experience: Learn to create interactive and engaging user interfaces by manipulating the Document Object Model (DOM) and responding to user events like clicks, scrolls, and keystrokes.",
            "four": "Expanding Career Opportunities: With JavaScript skills, you can pursue careers in web development, full-stack development, front-end engineering, and mobile app development (using frameworks like React Native or Ionic). Additionally, JavaScript serves as a foundation for learning other technologies such as Node.js for server-side development, opening doors to diverse opportunities in the tech industry."
        },
        "courseDuration": "38 Hrs",
        "tutorName": "Sazin Sami",
        "rating": "5",
        "image": "https://1000logos.net/wp-content/uploads/2020/09/JavaScript-Logo.jpg",
        "demandOutOf10": "9",
        "enrolled": "100"
    },
    {
        "id": "06",
        "courseName": "Learn Python from basic to advance",
        "LangName": "Python Programming Language",
        "creator": "Guido van Rossum",
        "yearCreated": "1991",
        "purpose": "Despite its versatility, Python can be slower compared to lower-level languages like C or C++. Additionally, its dynamic typing can sometimes lead to runtime errors that might have been caught at compile time in statically-typed languages.",
        "benefits": "Python boasts a large standard library, extensive third-party modules, and a vibrant community. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python's simplicity and readability facilitate rapid development and ease of maintenance.",
        "lackings": "Despite its versatility, Python can be slower compared to lower-level languages like C or C++. Additionally, its dynamic typing can sometimes lead to runtime errors that might have been caught at compile time in statically-typed languages.",
        "details": "Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility. Developed by Guido van Rossum in the late 1980s, Python emphasizes code readability and productivity, making it a popular choice for beginners and experienced programmers alike. Python supports multiple programming paradigms, including procedural, object-oriented, and functional programming, and boasts a rich ecosystem of libraries and frameworks for various domains such as web development, data science, machine learning, and automation. Its clean and concise syntax allows developers to express concepts in fewer lines of code compared to other languages, fostering rapid development and prototyping.",
        "outcomes":{
            "one": "Understanding Core Concepts: Master fundamental programming concepts such as variables, data types, control structures, functions, and modules in Python.",
            "two": "Automating Tasks: Learn to automate repetitive tasks, streamline workflows, and build scripts for tasks such as data processing, file manipulation, web scraping, and system administration.",
            "three": "Exploring Diverse Applications: Dive into Python's extensive library ecosystem, including libraries like NumPy, pandas, TensorFlow, Django, Flask, and more, to develop applications ranging from web development to scientific computing and machine learning.",
            "four": "Expanding Career Opportunities: With Python skills, you can pursue careers in various industries, including software development, data analysis, machine learning, artificial intelligence, web development, and cybersecurity. Additionally, Python's popularity and versatility make it an invaluable tool for freelancers, educators, and hobbyists, offering abundant opportunities for growth and innovation in the ever-evolving tech landscape."
        },
        "courseDuration": "48 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "4",
        "image": "https://e0.pxfuel.com/wallpapers/47/592/desktop-wallpaper-code-text-font-python-programming-language.jpg",
        "demandOutOf10": "10",
        "enrolled": "90"
    },
    {
        "id": "07",
        "courseName": "Learn Swift from basic to advance",
        "LangName": "Swift Programming Language",
        "creator": "Chris Lattner & Apple Inc",
        "yearCreated": "2014",
        "purpose": "Swift's ecosystem is still evolving, with fewer third-party libraries and tools compared to more established languages like Objective-C. Its rapid evolution can also lead to compatibility issues between different Swift versions.",
        "benefits": "Swift offers a clean syntax, type safety, and memory management features such as automatic reference counting (ARC). It's optimized for performance and developer productivity, making it popular among Apple developers.",
        "lackings": "Swift's ecosystem is still evolving, with fewer third-party libraries and tools compared to more established languages like Objective-C. Its rapid evolution can also lead to compatibility issues between different Swift versions.",
        "details": "Swift is a powerful and modern programming language developed by Apple in 2014 for iOS, macOS, watchOS, and tvOS development. It offers a concise syntax, strong type inference, and a plethora of modern features that make it both efficient and developer-friendly. Swift is designed to be safe, fast, and expressive, with built-in support for optionals, generics, closures, and functional programming paradigms. It has quickly gained popularity among developers for its ease of use and performance, becoming the preferred language for building apps across Apple's ecosystem.",
        "outcomes":{
            "one": "Understanding iOS Development Fundamentals: Familiarize yourself with basic concepts such as variables, data types, control flow, functions, and object-oriented programming (OOP) principles in Swift.",
            "two": "Building iOS Apps: Dive into iOS app development using Swift, learning about UIKit, Interface Builder, Auto Layout, and other essential frameworks and tools for creating user interfaces and handling user interactions.",
            "three": "Exploring Advanced iOS Features: Explore advanced iOS development topics like networking, concurrency, Core Data, Grand Central Dispatch (GCD), and SwiftUI to build more complex and feature-rich apps.",
            "four": "Expanding Career Opportunities: With Swift skills, you can pursue careers as an iOS developer, mobile app developer, or software engineer specializing in Apple platforms. Additionally, Swift's versatility extends beyond iOS to macOS, watchOS, and tvOS development, providing diverse opportunities in the rapidly growing Apple ecosystem."
        },
        "courseDuration": "19 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "3",
        "image": "https://i.pinimg.com/originals/8a/22/64/8a226479ce563f70b2a50f56e77ba18c.jpg",
        "demandOutOf10": "5",
        "enrolled": "50"
    },
    {
        "id": "08",
        "courseName": "Zero to Hero in Kotlin",
        "LangName": "Kotlin Programming Language",
        "creator": "JetBrains",
        "yearCreated": "2011",
        "purpose": "Kotlin's adoption outside of Android development is still growing, which means fewer resources and community support compared to more established languages. Its integration with existing Java codebases can also introduce challenges, especially in complex projects.",
        "benefits": "Kotlin offers concise syntax, null safety, and powerful features such as extension functions and data classes. It's officially supported for Android development by Google and is praised for its expressiveness and safety features.",
        "lackings": "Kotlin's adoption outside of Android development is still growing, which means fewer resources and community support compared to more established languages. Its integration with existing Java codebases can also introduce challenges, especially in complex projects.",
        "details": "Kotlin is a modern, statically-typed programming language developed by JetBrains in 2011. Initially targeting the Java Virtual Machine (JVM), Kotlin has since expanded to support other platforms such as Android, JavaScript, and native code through Kotlin/Native. Kotlin is known for its concise syntax, interoperability with Java, null safety features, and functional programming capabilities. It offers a seamless transition for Java developers while providing modern language features that enhance productivity and code quality.",
        "outcomes":{
            "one": "Kotlin is a modern, statically-typed programming language developed by JetBrains in 2011. Initially targeting the Java Virtual Machine (JVM), Kotlin has since expanded to support other platforms such as Android, JavaScript, and native code through Kotlin/Native. Kotlin is known for its concise syntax, interoperability with Java, null safety features, and functional programming capabilities. It offers a seamless transition for Java developers while providing modern language features that enhance productivity and code quality.",
            "two": "Exploring Multi-platform Development: Dive into Kotlin's support for multi-platform development, enabling you to share code between different platforms such as JVM, Android, iOS, and web applications, reducing development time and effort.",
            "three": "Building Android Applications: Explore Kotlin's seamless integration with Android Studio and Android SDK, allowing you to develop Android applications efficiently while leveraging Java libraries and existing codebases.",
            "four": "Expanding Career Opportunities: With Kotlin skills, you can pursue careers in Android app development, server-side development with frameworks like Spring Boot or Ktor, multi-platform development, and beyond. Additionally, Kotlin's growing adoption by major tech companies and its status as the preferred language for Android development make it a valuable skill in the software industry."
        },
        "courseDuration": "10 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "5",
        "image": "https://hypersense-software.com/blog/wp-content/uploads/2023/04/R6Z7GWmk_2x.jpg",
        "demandOutOf10": "6",
        "enrolled": "40"
    },
    {
        "id": "09",
        "courseName": "Master in Ruby",
        "LangName": "Ruby Programming Language",
        "creator": " Yukihiro Matsumoto (Matz)",
        "yearCreated": "1990",
        "purpose": "Ruby was designed to prioritize developer happiness and productivity by favoring convention over configuration. It aimed to provide a simple, flexible, and object-oriented language suitable for both beginners and experienced programmers.",
        "benefits": "Ruby's elegant syntax, dynamic typing, and focus on developer joy make it a favorite among web developers. It's known for its thriving ecosystem of gems (libraries) and frameworks like Ruby on Rails, which enable rapid web application development.",
        "lackings": "Ruby's dynamic nature can lead to performance issues in CPU-intensive applications compared to statically-typed languages. Its ecosystem, while rich, can also suffer from dependency management challenges and compatibility issues between gem versions.",
        "details": "Ruby is a dynamic, object-oriented programming language known for its simplicity and productivity. Developed by Yukihiro Matsumoto in the mid-1990s, Ruby emphasizes readability and convention over configuration, making it a favorite among web developers and startups. It offers elegant syntax and powerful features like blocks, closures, and metaprogramming, enabling developers to write concise and expressive code. Ruby's popularity soared with the Ruby on Rails framework, which revolutionized web development by providing a convention-over-configuration approach and automated many repetitive tasks.",
        "outcomes":{
            "one": "Understanding Programming Fundamentals: Master fundamental programming concepts like variables, control structures, loops, functions, and object-oriented programming principles in Ruby.",
            "two": "Exploring Ruby's Ecosystem: Explore the rich ecosystem of Ruby gems (libraries) for various tasks such as database management, authentication, testing, and more. Get familiar with tools like Bundler for dependency management and RSpec for testing.",
            "three": "Building Web Applications with Ruby on Rails: Dive into Ruby on Rails, a powerful web application framework, to rapidly build scalable and maintainable web applications. Learn about MVC architecture, ActiveRecord for database interactions, and convention-driven development.",
            "four": "Expanding Career Opportunities: With Ruby skills, you can pursue careers in web development, software engineering, and startup environments. Additionally, learning Ruby opens doors to opportunities in other programming languages and frameworks, as its elegant syntax and emphasis on developer happiness provide a solid foundation for transitioning to other technologies."
        },
        "courseDuration": "20 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "4",
        "image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190902124355/ruby-programming-language.png",
        "demandOutOf10": "4",
        "enrolled": "60"
    },
    {
        "id": "10",
        "courseName": "Zero to Hero in Rust",
        "LangName": "Rust Programming Language",
        "creator": "Mozilla",
        "yearCreated": "2015",
        "purpose": "Rust was designed to provide a safe systems programming language that prevents common programming errors such as null pointer dereferencing, data races, and memory leaks. It aimed to combine the performance of low-level languages like C and C++ with modern language features.",
        "benefits": "Rust offers strong memory safety guarantees through its ownership system and borrow checker. It's suitable for building high-performance, concurrent, and reliable systems software, including operating systems, game engines, and web servers.",
        "lackings": "Rust's steep learning curve and strict compiler enforcement can be challenging for beginners and experienced programmers alike. Its ecosystem is still maturing, with fewer libraries and tools compared to more established languages like C++.",
        "details": "Rust is a modern systems programming language developed by Mozilla, known for its focus on safety, performance, and concurrency. It provides memory safety guarantees without sacrificing performance, making it ideal for building system-level software such as operating systems, game engines, and embedded systems. Rust's syntax is reminiscent of C++ but with modern features like pattern matching, ownership semantics, and zero-cost abstractions. Learning Rust equips developers with powerful tools for writing efficient and reliable code while mitigating common pitfalls like memory leaks and data races.",
        "outcomes":{
            "one": "Understanding System-Level Programming: Gain a deep understanding of low-level programming concepts such as memory management, concurrency, and system calls, essential for developing efficient and secure system software.",
            "two": "Exploring Modern Development Practices: Dive into Rust's ecosystem of tools and libraries, including Cargo (Rust's package manager), crates (third-party libraries), and modern development workflows like testing, documentation, and continuous integration.",
            "three": "Ensuring Memory Safety and Concurrency: Learn Rust's unique ownership model, which prevents common memory-related bugs like null pointer dereferences, buffer overflows, and data races, leading to more reliable and robust code.",
            "four": "Expanding Career Opportunities: With Rust skills, you can pursue careers in fields like systems programming, embedded development, game development, and infrastructure engineering. Additionally, Rust's growing popularity and adoption by companies like Mozilla, Microsoft, and Dropbox make it a valuable asset in today's tech industry, offering diverse opportunities for developers seeking challenging and impactful projects."
        },
        "courseDuration": "29 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "3",
        "image": "https://blog.altabel.com/wp-content/uploads/2020/08/1.png",
        "demandOutOf10": "6",
        "enrolled": "80"
    },
    {
        "id": "11",
        "courseName": "Master in Golang",
        "LangName": "Golang Programming Language",
        "creator": "Robert Griesemer, Rob Pike & Ken Thompson",
        "yearCreated": "2009",
        "purpose": "Go was designed to be a simple, efficient, and concurrent programming language suitable for building scalable and reliable software systems. It aimed to address common pain points of existing languages, such as slow compilation times and lack of built-in support for concurrency.",
        "benefits": "Go offers a simple and concise syntax, fast compilation times, and built-in support for concurrency through goroutines and channels. It's widely used for building web servers, microservices, and cloud-native applications due to its performance and scalability.",
        "lackings": "Go's simplicity comes with trade-offs, such as limited support for advanced language features and generics. Its standard library, while comprehensive, may lack certain specialized functionalities found in other languages' ecosystems.",
        "details": "Go, also known as Golang, is a statically typed, compiled programming language developed by Google in 2007. Go combines the simplicity and readability of scripting languages with the performance and efficiency of compiled languages like C or C++. It's designed for building reliable, efficient, and scalable software, particularly for systems programming, cloud-native development, and large-scale distributed systems. Go's syntax is concise and straightforward, with built-in support for features like concurrency, garbage collection, and dependency management, making it an excellent choice for modern software development projects.",
        "outcomes":{
            "one": "Understanding Core Principles: Master the fundamentals of Go, including variables, data types, control structures, functions, and error handling, to build a solid foundation for programming in Go.",
            "two": "Exploring Concurrency: Learn Go's powerful concurrency primitives like goroutines and channels, enabling you to write concurrent and parallel programs efficiently, making it particularly suitable for building scalable and high-performance applications.",
            "three": "Building Scalable Web Services: Explore Go's standard library, which includes packages for HTTP servers, JSON handling, and templating, to develop robust and efficient web applications and microservices.",
            "four": "With Go skills, you can pursue careers in areas such as cloud-native development, backend development, DevOps, and distributed systems engineering. Additionally, Go's growing popularity and demand in the industry make it a valuable addition to your programming toolkit, enhancing your career prospects in the tech industry."
        },
        "courseDuration": "49 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "3",
        "image": "https://www.freecodecamp.org/news/content/images/2021/10/golang.png",
        "demandOutOf10": "4",
        "enrolled": "70"
    },
    {
        "id": "12",
        "courseName": "Learn PHP from basic to advance",
        "LangName": "PHP Programming Language",
        "creator": "Rasmus Lerdorf",
        "yearCreated": "1994",
        "purpose": "PHP was initially developed as a server-side scripting language for building dynamic web pages. It aimed to simplify web development by embedding code directly into HTML, enabling the creation of dynamic and interactive websites.",
        "benefits": "PHP is widely supported by web hosting providers and has a vast ecosystem of frameworks (e.g., Laravel, Symfony) and content management systems (e.g., WordPress, Drupal). It's known for its ease of use, extensive documentation, and large community.",
        "lackings": "PHP's design choices and historical quirks have led to inconsistencies and security vulnerabilities in certain areas of the language. Its loosely typed nature and lack of strict error checking can also lead to hard-to-debug issues in larger codebases.",
        "details": "PHP is a server-side scripting language primarily used for web development and creating dynamic web pages. Developed in the mid-1990s by Rasmus Lerdorf, PHP stands for \"Hypertext Preprocessor\" and is widely used in conjunction with HTML to build websites and web applications. PHP scripts are executed on the server, generating HTML content that is then sent to the client's browser, making it an essential tool for creating dynamic and interactive web experiences. PHP is known for its ease of use, extensive documentation, and support for a wide range of databases, making it a popular choice for web developers.",
        "outcomes":{
            "one": "Understanding Server-Side Web Development: Master the fundamentals of server-side programming, including variables, data types, control structures, functions, and object-oriented programming (OOP) concepts in PHP.",
            "two": "Building Dynamic Websites: Learn to create dynamic and interactive web pages by embedding PHP code within HTML, allowing for the generation of dynamic content, user authentication, form handling, file manipulation, and database interaction.",
            "three": "xploring Web Development Frameworks: Dive into popular PHP frameworks like Laravel, Symfony, or CodeIgniter to streamline development, improve code organization, and enhance scalability and security.",
            "four": "Expanding Career Opportunities: With PHP skills, you can pursue careers as a web developer, back-end engineer, full-stack developer, or PHP developer in various industries. Additionally, learning PHP serves as a foundation for understanding other server-side scripting languages like Python (Django), Ruby (Rails), or Node.js, opening doors to diverse opportunities in the web development field."
        },
        "courseDuration": "32 Hrs",
        "tutorName": "Samius Sazin",
        "rating": "2",
        "image": "https://www.koombea.com/wp-content/themes/koombea/dist/images/php-circuit-43f9c1a1f9d2bf19a7d9f4a7b4738620.png",
        "demandOutOf10": "5",
        "enrolled": "60"
    }
]